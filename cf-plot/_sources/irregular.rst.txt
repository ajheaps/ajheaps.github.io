Irregular grid plots
********************


There are various methods of contouring irregular data.  The one I have had the best results from is to regrid the data to be on a regular longitude latitude grid using the Matplotlib griddata function. This is the method used for the examples below.

Tricontourf and tricontour can also be used but these produce errors on an Orca2 tripolar grid.  The filled contours are improperly filled, the contour lines sometimes go in a straight line across the plot and contour line labelling produces an error.  There is also the added complication of BaseMap not supporting tricontour at version 1.0.8.



Example 24 - irregular grid plot
--------------------------------

Here we read in and contour temperature from meteorological stations around the Bristish Isles.

 
.. image::  images/fig24.png
   :scale: 52% 

::

   import cf, cfplot as cfp
   import numpy as np
   from matplotlib.mlab import griddata

   #Arrays for data
   lons=[]
   lats=[]
   pressure=[]
   temp=[]

   #Read data
   f = open('/opt/graphics/cfplot_data/synop_data.txt')
   lines = f.readlines()
   for line in lines:
      mysplit=line.split()
      lons=np.append(lons, float(mysplit[1]))
      lats=np.append(lats, float(mysplit[2]))
      pressure=np.append(pressure, float(mysplit[3]))
      temp=np.append(temp, float(mysplit[4]))

   #Linearly interpolate data to a regular grid
   lons_new=np.arange(140)*0.1-11.0
   lats_new=np.arange(140)*0.1+49.0
   temp_new = griddata(lons, lats, temp, lons_new, lats_new, interp='linear')

   cfp.cscale('parula')
   cfp.con(x=lons_new, y=lats_new, f=temp_new, ptype=1)


| 
| 


Example 25 - irregular grid plot - Check of data values
-------------------------------------------------------

To see if this plot is correct we can add some extra code to that above to plot the station locations and values at that point.  The decimal point is roughly where the data point is located.

::

   cfp.gopen()
   cfp.con(x=lons_new, y=lats_new, f=temp_new, ptype=1)
   for i in np.arange(len(lines)):
      cfp.plotvars.plot.text(float(lons[i]), float(lats[i]), str(temp[i]), \
                             horizontalalignment='center',verticalalignment='center')

   cfp.gclose()



.. image::  images/fig25.png
   :scale: 52% 


| 
| 


Example 26 - Orca2 grid
-----------------------

.. image::  images/fig26.png
   :scale: 52% 

::

   import numpy as np
   import cf, cfplot as cfp
   from netCDF4 import Dataset as ncfile
   from matplotlib.mlab import griddata

   #Get an Orca grid and flatten the arrays
   nc = ncfile('/opt/graphics/cfplot_data/orca2.nc')
   lons=np.array(nc.variables['longitude'])
   lats=np.array(nc.variables['latitude'])
   temp=np.array(nc.variables['sst'])
   lons=lons.flatten()
   lats=lats.flatten()
   temp=temp.flatten()

   #Add wrap around at both longitude limits 
   pts=np.squeeze(np.where(lons < -150))
   lons=np.append(lons, lons[pts]+360)
   lats=np.append(lats, lats[pts])
   temp=np.append(temp, temp[pts])

   pts=np.squeeze(np.where(lons > 150))
   lons=np.append(lons, lons[pts]-360)
   lats=np.append(lats, lats[pts])
   temp=np.append(temp, temp[pts])

   lons_new=np.arange(181*8)*0.25-180.0
   lats_new=np.arange(91*8)*0.25-90.0
   temp_new = griddata(lons, lats, temp, lons_new, lats_new, interp='linear')

   cfp.con(x=lons_new, y=lats_new, f=temp_new, ptype=1)









