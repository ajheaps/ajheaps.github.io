Unstructured grids
******************

Unstructured grids have data points in non-regular locations, examples of these are the LFRic model grid, the ORCA ocean grid and weather station data.

The `UGRID <https://ugrid-conventions.github.io/ugrid-conventions>`_ data storage convention for netCDF is gaining traction within the CF communtity but isn't yet part of the CF metadata conventions.  cf-python and cf-plot will be updated once the UGRID convention becomes part of the CF conventions.  This page shows how to plot data that is both in UGRID compliant netCDF form and numpy arrays of unstructured data.



.. image::  images/us01.png
   :scale: 52% 

::

   import cf
   import cfplot as cfp
   f=cf.read('lfric_initial.nc')

   pot=f[33][4,:]
   lons = f[12]
   lats = f[13]
   faces = f[11]

   cfp.levs(240, 310, 5)

   cfp.con(f=pot, face_lons=lons, face_lats=lats, face_connectivity=faces, lines=False)


Once UGRID is in the CF metadata conventions the face plotting commands will be simplified as the face connectivity, associated longitudes and latitudes will all be described within the data field.  The data field used here is a test field of potential temperature and isn't realistic in regards to the actual values.



.. image::  images/us02.png
   :scale: 52% 

::

   cfp.mapset(proj='npstere')
   cfp.con(f=pot, face_lons=lons, face_lats=lats, face_connectivity=faces, lines=False)




.. image::  images/us03.png
   :scale: 52% 

::

   import cf
   import cfplot as cfp
   f=cf.read('lfric_initial.nc')[33]
   g=f[0,:]

   cfp.con(g, lines=False )




Orca2 grid
----------

.. image::  images/us04.png
   :scale: 52% 

::

   import cf
   import cfplot as cfp
   import numpy as np
   from netCDF4 import Dataset as ncfile

   #Get an Orca grid and flatten the arrays
   nc = ncfile('cfplot_data/orca2.nc')
   lons=np.array(nc.variables['longitude'])
   lats=np.array(nc.variables['latitude'])
   temp=np.array(nc.variables['sst'])
   lons=lons.flatten()
   lats=lats.flatten()
   temp=temp.flatten()

   cfp.con(x=lons, y=lats, f=temp, ptype=1, ugrid=True)








Station data
------------

Here we read in and contour temperature from meteorological stations around the British Isles.

 
.. image::  images/us05.png
   :scale: 52% 

::

   import cf
   import cfplot as cfp
   import numpy as np
   from scipy.interpolate import griddata

   # Arrays for data
   lons=[]
   lats=[]
   pressure=[]
   temp=[]

   # Read data and make the contour plot
   f = open('cfplot_data/synop_data.txt')
   lines = f.readlines()
   for line in lines:
      mysplit=line.split()
      lons=np.append(lons, float(mysplit[1]))
      lats=np.append(lats, float(mysplit[2]))
      pressure=np.append(pressure, float(mysplit[3]))
      temp=np.append(temp, float(mysplit[4]))

   cfp.con(x=lons, y=lats, f=temp, ptype=1, ugrid=True)

| 
| 


Station data - check of data values
-----------------------------------

To see if this plot is correct we can add some extra code to that above to plot the station locations and values at that point.  The decimal point is roughly where the data point is located.

::

   import cartopy.crs as ccrs
   cfp.gopen()
   cfp.con(x=lons_new, y=lats_new, f=temp_new, colorbar_label_skip=2, ptype=1)
   for i in np.arange(len(lines)):
      cfp.plotvars.mymap.text(float(lons[i]), float(lats[i]), str(temp[i]), \
                              horizontalalignment='center',verticalalignment='center', \
                              transform=ccrs.PlateCarree())

   cfp.gclose()



.. image::  images/us06.png
   :scale: 52% 


| 
| 






