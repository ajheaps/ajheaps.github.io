Passing data to cf-plot
***********************

Using cf-python - cf compliant data
-----------------------------------
Data is generally passed to cf-plot via cf-python as a 2-dimensional field.

::

   import cf, cfplot as cfp
   f=cf.read('/opt/graphics/cfplot_data/ggap.nc')

f is now an list of 12 fields. 

::

   [<CF Field: long_name:Potential vorticity(time(1), pressure(23), latitude(160), longitude(320)) K m**2 kg**-1 s**-1>,
   <CF Field: long_name:Ozone mass mixing ratio(time(1), pressure(23), latitude(160), longitude(320)) kg kg**-1>,
   <CF Field: air_temperature(time(1), pressure(23), latitude(160), longitude(320)) K>,
   <CF Field: atmosphere_relative_vorticity(time(1), pressure(23), latitude(160), longitude(320)) s**-1>,
   <CF Field: atmosphere_relative_vorticity(time(1), pressure(23), latitude(160), longitude(320)) m**2 s**-1>,
   <CF Field: divergence_of_wind(time(1), pressure(23), latitude(160), longitude(320)) s**-1>,
   <CF Field: divergence_of_wind(time(1), pressure(23), latitude(160), longitude(320)) m**2 s**-1>,
   <CF Field: eastward_wind(time(1), pressure(23), latitude(160), longitude(320)) m s**-1>,
   <CF Field: geopotential(time(1), pressure(23), latitude(160), longitude(320)) m**2 s**-2>,
   <CF Field: northward_wind(time(1), pressure(23), latitude(160), longitude(320)) m s**-1>,
   <CF Field: relative_humidity(time(1), pressure(23), latitude(160), longitude(320)) %>,
   <CF Field: specific_humidity(time(1), pressure(23), latitude(160), longitude(320)) kg kg**-1>,
   <CF Field: vertical_air_velocity_expressed_as_tendency_of_pressure(time(1), pressure(23), latitude(160), longitude(320)) Pa s**-1>]



To contour data a 2 dimensional field is needed. In the case below we select the 500mb temperature with the cf subspace method.

::

   f[2].subspace(pressure=500)
   <CF Field: air_temperature(time(1), pressure(1), latitude(160), longitude(320)) K>
   cfp.con(f[2].subspace(pressure=500))


.. image::  images/data_fig1.png
   :scale: 50% 


To mean the field use the cf collapse function:

::

   f[2].collapse( 'mean','longitude')
   <CF Field: air_temperature(time(1), pressure(23), latitude(160), longitude(1)) K>
   cfp.con(f[2].collapse( 'mean','longitude'))


.. image::  images/data_fig2.png
   :scale: 50% 



Using cf-plot with non-cf compliant data
-----------------------------------------

Although newer model and reanalyis products are generally cf compliant there is a considerable amount of data being used that is of varying degrees of cf compliance.  

Example 1
=========
In this locally processed ERA40 reanalysis field there is a distinct lack of standard names.  Even the long names are somewhat terse - p for pressure for example.

::

   f=cf.read('/opt/graphics/cfplot_data/ggap199006200600.nc')[9]   
   <CF Field: geopotential(long_name:t(1), long_name:p(37), long_name:latitude(256), 
   long_name:longitude(512)) kg kg**-1>

We can still slice and plot the data by inspecting the dimensions of the field:

::

   f.items()
   {'dim2': <CF DimensionCoordinate: long_name:latitude(256) degrees_north>, 
   'dim3': <CF DimensionCoordinate: long_name:longitude(512) degrees_east>, 
   'dim0': <CF DimensionCoordinate: long_name:t(1) days since 1990-06-20 06:00:00>, 
   'dim1': <CF DimensionCoordinate: long_name:p(37) mbar>}


We see that dim1 is the pressure coordinate and can select the 700mb level and contour that.

::
     
   f.item('dim1').array
   array([ 1000.,   975.,   950.,   925.,   900.,   875.,   850.,   825.,
         800.,   775.,   750.,   700.,   650.,   600.,   550.,   500.,
         450.,   400.,   350.,   300.,   250.,   225.,   200.,   175.,
         150.,   125.,   100.,    70.,    50.,    30.,    20.,    10.,
           7.,     5.,     3.,     2.,     1.], dtype=float32)

   f.subspace(dim1=700)
   <CF Field: geopotential(long_name:t(1), long_name:p(1), long_name:latitude(256), long_name:longitude(512)) kg kg**-1>
   
   cfp.con(f.subspace(dim1=700))


.. image::  images/data_fig3.png
   :scale: 50% 

Example 2
=========

In this dataset there are neither standard or long names.  

::

   f=cf.read('/opt/graphics/cfplot_data/gdata.nc')[0]   
   <CF Field: ncvar:temp(ncvar:p(22), ncvar:lat(73), ncvar:lon(145)) >


We can still slice and plot the data as below.


::
 
   f.items()
   {'dim2': <CF DimensionCoordinate: ncvar:lon(145)>, 
   'dim0': <CF DimensionCoordinate: ncvar:p(22)>, 
   'dim1': <CF DimensionCoordinate: ncvar:lat(73)>}

   f.item('dim0').array
   array([  1.00000000e+03,   7.00000000e+02,   5.00000000e+02,
         3.20000000e+02,   2.15000000e+02,   1.50000000e+02,
         1.00000000e+02,   7.00000000e+01,   5.00000000e+01,
         3.20000000e+01,   2.00000000e+01,   1.50000000e+01,
         1.00000000e+01,   7.00000000e+00,   5.00000000e+00,
         3.20000005e+00,   2.00000000e+00,   1.50000000e+00,
         1.00000000e+00,   6.99999988e-01,   5.00000000e-01,
         3.00000012e-01], dtype=float32)

So to plot the 1000mb temperature we would use:

::

   cfp.con(f.subspace(dim0=1000))


.. image::  images/data_fig4.png
   :scale: 50% 


|
|
|
Passing data via arrays 
-----------------------

cf-plot can also make contour and vector plots by passing data arrays.

::

   import cfplot as cfp
   from netCDF4 import Dataset as ncfile
   nc = ncfile('/opt/graphics/cfplot_data/tas_A1.nc')[0]
   lons=nc.variables['lon'][:]
   lats=nc.variables['lat'][:]
   temp=nc.variables['tas'][0,:,:]
   cfp.con(f=temp, x=lons, y=lats)

.. image::  images/data_fig5.png
   :scale: 50% 



The contouring routine doesn't know that the data passed is a map plot. This can be explicitly set with the ptype flag to con.

::

   cfp.con(f=temp, x=lons, y=lats, ptype=1)
   

.. image::  images/data_fig6.png
   :scale: 50% 


Other types of plot are: 

| ptype=2  - latitude - pressure/height plot
| ptype=3  - longitude - pressure/height plot
| ptype=4  - longitude - time plot
| ptype=5  - latitude - time plot
| ptype=6  - rotated pole plot






